// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }






// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  approvedResults Result[] @relation("ApprovedResults")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model StudentProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  results Result[]
}

model TeacherProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subjects Subject[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  level     String // Primary, Junior Secondary, Senior Secondary
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students StudentProfile[]
  subjects Subject[]
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  teacherId String
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  results Result[]
}

model Result {
  id           String   @id @default(cuid())
  studentId    String
  student      StudentProfile @relation(fields: [studentId], references: [id])
  subjectId    String
  subject      Subject @relation(fields: [subjectId], references: [id])
  testScore    Float?
  examScore    Float?
  totalScore   Float
  grade        String
  status       ResultStatus @default(PENDING)
  approvedById String?
  approvedBy   User?        @relation(fields: [approvedById], references: [id], name: "ApprovedResults")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ResultStatus {
  PENDING
  APPROVED
  DISAPPROVED
}